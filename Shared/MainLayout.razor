@inherits LayoutComponentBase
@inject ILocalStorageService localStorage

<div class="page @CssClass">
    <SideNavigation Destinations=@destinations />
    <BottomNavigation Destinations=@destinations />
    <div class="main">
        @if (isAuthenticated)
        {
            @Body
        }
        else
        {
            <Login />
        }
    </div>
</div>

@code
{
    private Destination[] destinations = new Destination[] {
        new Destination() {
            Route = "feed",
            Text = "Feed",
            Icon = __builder => { <FeedIcon /> },
        },
        new Destination() {
            Route = "notifications",
            Text = "Notifications",
            Icon = __builder => { <NotificationsIcon /> },
        },
        new Destination() {
            Route = "archive",
            Text = "Archive",
            Icon = __builder => { <ArchiveIcon /> },
        },
        new Destination() {
            Route = "drafts",
            Text = "Drafts",
            Icon = __builder => { <DraftsIcon /> },
        },
        new Destination() {
            Route = "settings",
            Text = "Settings",
            Icon = __builder => { <SettingsIcon /> },
        },
    };
    private bool isAuthenticated;
    private string CssClass => isAuthenticated ? "" : "-full-screen";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        localStorage.Changed += OnLocalStorageChanged;
        var token = await localStorage.GetItemAsStringAsync("auth.token");
        var changedArgs = new Blazored.LocalStorage.ChangedEventArgs() { Key = "auth.token", NewValue = token };
        OnLocalStorageChanged(this, changedArgs);
    }

    private void OnLocalStorageChanged(object sender, Blazored.LocalStorage.ChangedEventArgs args)
    {
        var value = args.NewValue?.ToString() ?? "";

        if (args.Key == "auth.token")
        {
            isAuthenticated = value.Length > 0;
        }
    }
}
