@inherits LayoutComponentBase
@implements IDisposable
@inject NavigationManager navigator
@inject IHistoryService history
@inject ILocalStorageService localStorage
@inject IJSRuntime javascript
@inject IAuthorService authorService

<div class="page @CssClass">
    <SideNavigation Destinations=@destinations />
    <BottomNavigation Destinations=@destinations />
    <div class="main">
        <Toolbar />
        <div class="content">
            @if (isAuthenticated)
            {
                @Body
            }
            else
            {
                <Login />
            }
        </div>
    </div>
</div>

@code {
    private Destination[] destinations = new Destination[] {
        new Destination() {
            Route = "feed",
            Text = "Feed",
            Icon = __builder => { <FeedIcon /> },
        },
        new Destination() {
            Route = "notifications",
            Text = "Notifications",
            Icon = __builder => { <NotificationsIcon /> },
        },
        new Destination() {
            Route = "archive",
            Text = "Archive",
            Icon = __builder => { <ArchiveIcon /> },
        },
        new Destination() {
            Route = "drafts",
            Text = "Drafts",
            Icon = __builder => { <DraftsIcon /> },
        },
        new Destination() {
            Route = "settings",
            Text = "Settings",
            Icon = __builder => { <SettingsIcon /> },
            Badge = __builder => { <UpdateBadge /> },
        },
    };
    private bool isAuthenticated;
    private string CssClass => isAuthenticated ? "" : "-full-screen";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (navigator.ToBaseRelativePath(navigator.Uri) == "")
        {
            await javascript.InvokeVoidAsync("window.location.replace", "feed");
        }

        localStorage.Changed += OnLocalStorageChanged;
        // Trigger post-login process
        var token = await localStorage.GetItemAsStringAsync("auth.token") ?? "";
        await localStorage.SetItemAsync("auth.token", token);
    }

    public void Dispose() => localStorage.Changed -= OnLocalStorageChanged;

    private async void OnLocalStorageChanged(object sender, Blazored.LocalStorage.ChangedEventArgs args)
    {
        if (args.Key == "auth.token")
        {
            var value = args.NewValue?.ToString() ?? "";
            isAuthenticated = value.Length > 0;

            if (isAuthenticated)
            {
                try
                {
                    var self = await authorService.GetSelf();
                    await localStorage.SetItemAsync("author.self", self);
                }
                catch (ApiException error)
                {
                    if (error.StatusCode == HttpStatusCode.Unauthorized)
                    {
                        isAuthenticated = false;
                    }
                }
            }

            if (!isAuthenticated)
            {
                await localStorage.ClearAsync();
            }

            StateHasChanged();
        }
    }
}
