@implements IDisposable
@inject NavigationManager navigator
@inject IToolbarService toolbarService

<header class="header">
    @foreach (var items in itemsLists)
    {
        var i = 0;
        <ul class="items-list">
            @foreach (var item in items)
            {
                var cls = i == 0 ? "-end" : i == 1 ? "-middle" : "-start";
                <li class="item @cls">@item</li>
            }
        @{ i++; }
        </ul>
    }
</header>

@code
{
    private IEnumerable<IEnumerable<RenderFragment>> itemsLists = Array.Empty<RenderFragment[]>();
    private string lastLocation;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        navigator.LocationChanged += OnLocationChanged;
        toolbarService.Changed += OnToolbarChanged;
    }

    public void Dispose()
    {
        navigator.LocationChanged -= OnLocationChanged;
        toolbarService.Changed -= OnToolbarChanged;
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        if (args.Location != lastLocation)
        {
            lastLocation = args.Location;
            toolbarService.SetItems(null);
        }
    }

    private void OnToolbarChanged(object sender, IEnumerable<IEnumerable<RenderFragment>> itemsLists)
    {
        this.itemsLists = itemsLists;
        StateHasChanged();
    }
}
